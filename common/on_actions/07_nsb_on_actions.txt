on_actions = {
	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_state_control_changed = {
		effect = {
			if = {
				limit = {
					FROM.FROM = { state = 85 }
				}
				if = {
					limit = {
						ROOT = {
							OR = {
								original_tag = GER
								original_tag = DNZ
							}
						}
					}
					85 = {
						reset_state_name = yes
					}
					reset_province_name = 362
				}
				if = {
					limit = { ROOT = { original_tag = POL } }
					85 = { set_state_name = "Gdańsk" }
					set_province_name = {
						id = 362
						name = "Gdańsk"
					}
				}
			}
			if = {
				limit = {
					divisions_in_state = { state = FROM.FROM size > 0 }
					FROM.FROM = { 
						NOT = { has_state_flag = already_sabotaged_flag }
					}
					FROM = {
						original_tag = POL
						always =no
					}
				}
				FROM.FROM = { 
					set_state_flag = poland_state_withdrawn
					state_event = { id = poland.23 trigger_for = controller }
				}
			}
		}

		#SOVIET - If Death to Invaders Propaganda Campaign is active, manage the appropriate state modifier
		effect = {
			if = {
				limit = {
					has_global_flag = SOV_propaganda_death_to_invaders_active_flag
					FROM.FROM = { is_core_of = SOV }
				}
				if = { #If SOV is new controller, remove state modifier
					limit = {
						ROOT = { tag = SOV }
						FROM.FROM = { has_dynamic_modifier = { modifier = SOV_invaders_must_die } }
					}
					FROM.FROM = { remove_dynamic_modifier = { modifier = SOV_invaders_must_die } }
				}
				else_if = { #If SOV lost the state, add state modifier
					limit = {
						FROM = { tag = SOV }
						ROOT = { has_war_with = SOV }
					}
					FROM.FROM = { add_dynamic_modifier = { modifier = SOV_invaders_must_die } }
				}
			}
		}
		
		#SOVIET - Clean other state modifiers when Soviets lose control over the state
		effect = {
			if = {
				limit = {
					FROM.FROM = { is_core_of = SOV }
					ROOT = { NOT = { tag = SOV } }
				}
				if = { #SOV_defend_moscow
					limit = {
						FROM.FROM = { has_dynamic_modifier = { modifier = SOV_defend_moscow } }
					}
					FROM.FROM = { remove_dynamic_modifier = { modifier = SOV_defend_moscow } }
				}
				if = { #SOV_increased_metals_production
					limit = {
						FROM.FROM = { has_dynamic_modifier = { modifier = SOV_increased_metals_production } }
					}
					FROM.FROM = { remove_dynamic_modifier = { modifier = SOV_increased_metals_production } }
				}
				if = { #SOV_seraya_loshad_battery
					limit = {
						FROM.FROM = { has_dynamic_modifier = { modifier = SOV_seraya_loshad_battery } }
					}
					FROM.FROM = { remove_dynamic_modifier = { modifier = SOV_seraya_loshad_battery } }
				}
				if = { #SOV_krasnaya_gorka_battery
					limit = {
						FROM.FROM = { has_dynamic_modifier = { modifier = SOV_krasnaya_gorka_battery } }
					}
					FROM.FROM = { remove_dynamic_modifier = { modifier = SOV_krasnaya_gorka_battery } }
				}
				if = { #SOV_armored_battery_35
					limit = {
						FROM.FROM = { has_dynamic_modifier = { modifier = SOV_armored_battery_35 } }
					}
					FROM.FROM = { remove_dynamic_modifier = { modifier = SOV_armored_battery_35 } }
				}
				if = { #SOV_factory_worker_militias_raised
					limit = {
						FROM.FROM = { has_dynamic_modifier = { modifier = SOV_factory_worker_militias_raised } }
					}
					FROM.FROM = { remove_dynamic_modifier = { modifier = SOV_factory_worker_militias_raised } }
				}
				if = { #SOV_civilian_labor_in_defense_mod
					limit = {
						FROM.FROM = { has_dynamic_modifier = { modifier = SOV_civilian_labor_in_defense_mod } }
					}
					FROM.FROM = { remove_dynamic_modifier = { modifier = SOV_civilian_labor_in_defense_mod } }
				}
			}
		}

		#GERMANY - If Soviet Imports is active, remove it
		effect = {
			if = {
				limit = {
					FROM = { tag = GER }
					FROM.FROM = { has_dynamic_modifier = { modifier = SOV_soviet_imports } }
				}
				FROM.FROM = { remove_dynamic_modifier = { modifier = SOV_soviet_imports } }
			}
		}

		#SOVIET - Nikolay Kuznetsov becomes an operative (Ukrainian state occupied)
		effect = { #ROOT is new controller #FROM is old controller #FROM.FROM is state ID
			if = {
				limit = {
					has_dlc = "La Resistance"
					FROM.FROM = {
						is_core_of = UKR
						NOT = { is_owned_by = ROOT }
					}
					FROM = {
						original_tag = SOV
						has_government = communism
					}
					ROOT = { has_war_with = SOV }
				}
				FROM = {
					set_variable = { SOV_invader_of_ukraine = ROOT } #Store invader in SOV for loc purposes in the event below
					country_event = { id = NSB_soviet_great_patriotic_war.01 days = 10 random_days = 30 }
				}
			}
		}
	}
	
	#FROM - Country (owner)
	#ROOT - leader
	#FROMFROM - original owner for exiled leaders
	on_unit_leader_level_up = {
		effect = {
			if = { 
				limit = { 
					FROM = { 
						has_idea = bold_attack_spirit 
					} 
				}
				character = { 
					IF = { 
						limit = { is_army_leader = yes }
					
						random_list = { 
							50 = { add_attack = 1 } 
							50 = {} 
						} 
					}
				}
			}
			else_if = { #since these spirits are mutually exclusive, we can use else_if for added performance!
				limit = {
					FROM = { has_idea = tenacious_defense_spirit }
				}
				character = { 
					IF = { 
						limit = { is_army_leader = yes }
					
						random_list = {
							50 = { add_defense = 1 }
							50 = {}
						}
					}
				}
			}
			else_if = {
				limit = {
					FROM = { has_idea = meticulous_preparation_spirit }
				}
				character = { 
					IF = { 
						limit = { is_army_leader = yes }
					
						random_list = {
							50 = { 
								add_planning = 1 
								add_logistics = 1
							}
							50 = {}
						}
					}
				}
			}
			else_if = {
				limit = {
					FROM = { has_idea = instilled_aggression_spirit }
				}
				character = { 
					IF = { 
						limit = { is_navy_leader = yes }
		
						random_list = {
							40 = { 
								add_attack = 1 
							}
							60 = {}
						}
					}
				}
			}
			else_if = {
				limit = {
					FROM = { has_idea = calculated_restraint_spirit }
				}
				character = { 
					IF = { 
						limit = { is_navy_leader = yes }
					
						random_list = {
							40 = { 
								add_defense = 1 
							}
							60 = {}
						}
					}
				}
			}
			else_if = {
				limit = {
					FROM = { has_idea = signals_training_spirit }
				}
				character = { 
					IF = { 
						limit = { is_navy_leader = yes }
					
						random_list = {
							40 = { 
								add_maneuver = 1
								add_coordination = 1
							}
							60 = {}
						}
					}
				}
			}
		}  
	}

	on_unit_leader_created = { # This uses the UNIT LEADER sub scope of a character, FROM == country
		effect = {
			character = {
				if = { 
					limit = {
						is_army_leader = yes
					}
					if = {
						limit = {	
							FROM = { has_idea = political_loyalty_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								50 = { 
									add_unit_leader_trait = media_personality
								}
								50 = { 
									add_unit_leader_trait = politically_connected
								}
							}
						}
						
					}
					else_if = {
						limit = {
							FROM = { has_idea = mobile_warfare_academy_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								50 = { 
									add_unit_leader_trait = panzer_leader
								}
								50 = {}
							}
						}
					}
					else_if = {
						limit = {
							FROM = { has_idea = inventive_leadership_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								75 = { 
									random_list = {
										33 = { add_unit_leader_trait = naval_invader }
										33 = { add_unit_leader_trait = commando }
										33 = { add_unit_leader_trait = trickster }
									}
								}
								25 = {}
							}
						}
					}
					else_if = {
						limit = {
							FROM = { has_idea = mass_assault_academy_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								50 = { 
									add_unit_leader_trait = infantry_officer
								}
								50 = {}
							}
						}
					}
					else_if = {
						limit = {
							FROM = { has_idea = superior_firepower_academy_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								50 = { 
									add_unit_leader_trait = engineer_officer
								}
								50 = {}
							}
						}
					}
					else_if = {
						limit = {
							FROM = { has_idea = theatre_training_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								50 = { 
									random_list = {
										50 = { add_unit_leader_trait = brilliant_strategist }
										50 = { add_unit_leader_trait = inflexible_strategist }
									}
								}
								50 = {}
							}
						}
					}
				}
				else_if = {
					limit = {
						FROM = { has_idea = fleet_in_being_academy_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
					}
					root = {
						random_list = {
							50 = { 
								add_unit_leader_trait = gunnery_expert
							}
							50 = {}
						}
					}
				}
				else_if = {
					limit = {
						FROM = { has_idea = trade_interdiction_academy_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
					}
					root = {
						random_list = {
							25 = { 
								add_unit_leader_trait = seawolf
							}
							25 = { 
								add_unit_leader_trait = blockade_runner
							}
							50 = {}
						}
					}
				}
				else_if = {
					limit = {
						FROM = { has_idea = base_strike_academy_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
					}
					root = {
						random_list = {
							50 = { 
								add_unit_leader_trait = aviation_enthusiast 
							}
							50 = {}
						}
					}
				}
			}
		}
	}
	
	#ROOT - country that just went to peace
	on_peaceconference_ended = { 
		effect = {
			if = {
				limit = {
					tag = GER
					is_subject = yes
				}
				GER = { #Stop democratic Germany from doing Anschluss and awakening their ambition of global domination
					uncomplete_national_focus = {
						focus = GER_rhineland
						uncomplete_children = yes
					}
					uncomplete_national_focus = {
						focus = GER_oppose_hitler
						uncomplete_children = yes
					}
				}
			}
		}
		effect = { #SOV - Fourth Five Year Plan
			if = {
				limit = {
					original_tag = SOV
					has_country_flag = SOV_third_five_year_plan_locked_flag
					NOT = { has_country_flag = SOV_fourth_five_year_plan_available_flag }
					OR = {
						NOT = {
							any_country = {
								has_country_flag = SOV_third_five_year_plan_disruptor_flag
							}
						}
						any_country = {
							has_country_flag = SOV_third_five_year_plan_disruptor_flag
							NOT = { has_war_with = ROOT }
						}
					}
				}
				set_country_flag = SOV_fourth_five_year_plan_available_flag
				clr_country_flag = SOV_great_patriotic_war_flag
			}
		}
	}

	#ROOT = attacking side
	#FROM = defending side
	#fired when two countries end up at war with each other (on_war is fired when a country goes to war against anyone and is not fired again when it enters war against another country unless it went to peace first)
	on_war_relation_added = { # ---> Fires in 2nd place (1st is on_declare_war) -> This one is triggered ALWAYS
		effect = { #SOV - Great Patriotic War and Third Five Year Plan
			if = {
				limit = {
					OR = {
						AND = {
							ROOT = { original_tag = SOV }
							FROM = {
								is_major = yes
								NOT = { original_tag = SOV }
							}
						}
						AND = {
							FROM = { original_tag = SOV }
							ROOT = {
								is_major = yes
								NOT = { original_tag = SOV }
							}
						}
					}
				}
				if = { ## GREAT PATRIOTIC WAR
					limit = {
						NOT = { has_country_flag = SOV_great_patriotic_war_flag }
					}
					SOV = { set_country_flag = SOV_great_patriotic_war_flag }
				}
				if = { ## THIRD FIVE YEAR PLAN
					limit = {
						SOV = { NOT = { has_country_flag = SOV_third_five_year_plan_locked_flag } }
					}
					SOV = {
						set_country_flag = SOV_third_five_year_plan_locked_flag

						if = { #Prio Germany if possible
							limit = {
								has_war_with = GER
								GER = { is_major = yes }
							}
							GER = { set_country_flag = SOV_third_five_year_plan_disruptor_flag }
						}
						else = { #If no Germany, choose a random enemy major
							random_enemy_country = {
								limit = {
									is_major = yes
								}
								set_country_flag = SOV_third_five_year_plan_disruptor_flag
							}
						}
						random_country = {
							limit = {
								has_country_flag = SOV_third_five_year_plan_disruptor_flag
							}
							#log = "The disruptor is [THIS.GetName]"
						}

						country_event = NSB_soviet_five_year_plan.01
					}
				}
			}
		}

		#SOVIET - If Soviet has "Long Live to Peace" propaganda campaign active, bad shit happens if they enter a war
		effect = {
			if = { #SOV is attacker - bad SOV gets properly punished
				limit = {
					ROOT = { original_tag = SOV }
					SOV = {
						has_country_flag = SOV_propaganda_peace_active_flag
						NOT = { has_country_flag = SOV_punished_for_breaking_flag }
					}
				}
				country_event = { id = NSB_soviet_propaganda_capmaign_events.2 hours = 4 random_hours = 2 }
			}
			else_if = { #SOV is defender - SOV gets mild punishment // #TODO_Manu: This is not triggering when someone declares on SOV
				limit = {
					FROM = { original_tag = SOV }
					SOV = {
						has_country_flag = SOV_propaganda_peace_active_flag
						NOT = { has_country_flag = SOV_punished_for_breaking_flag }
					}
				}
				country_event = { id = NSB_soviet_propaganda_capmaign_events.3 hours = 4 random_hours = 2 }
			}
		}

		#FINLAND - Winter War has started!
		effect = {
			if = {
				limit = {
					ROOT = { tag = SOV }
					FROM = { tag = FIN }
					NOT = { has_global_flag = SOV_winter_war_flag }
				}
				set_global_flag = SOV_winter_war_flag
				FIN = { country_event = finland.10 }
			}
		}
		effect = {
			if = {
				limit = {
					FROM = { tag =  SOV } 
					ROOT = { tag =  GER } 
					NOT = {
						SOV = {
							has_country_flag = SOV_barbarossa_scorched_earth_delay
						}
					}
				}
				SOV = {
					set_country_flag = { flag = SOV_barbarossa_scorched_earth_delay days = 45 value = 1 }
				}
			}
		}
	}

	on_weekly_SOV = {
		effect ={ #Weekly Paranoia modifiers
			if = { #If other modifiers affect Paranoia, then use the same flag with different values, which will work as a multiplier
				limit = {
					has_country_flag = SOV_paranoia_system_active_flag
					has_country_flag = SOV_paranoia_modifier_active_flag #Stalin's Paranoid leader trait
				}
				SOV_paranoia_modifier_increase_effect = yes
			}
		}

		effect = { #Randomly Triggered Purges
			if = {
				limit = {
					NOT = { has_country_flag = SOV_civil_war_triggered_flag } # check if Civil war has been triggered first TODO_THOMAS: remove if not using paranoia
					has_country_flag = SOV_paranoia_system_active_flag
				}
				set_temp_variable = { SOV_temp_paranoia_days = SOV_medium_paranoia_days }
				add_to_temp_variable = { SOV_temp_paranoia_days = SOV_high_paranoia_days }
				#log = "Total Paranoia days = [?SOV_temp_paranoia_days]"

				if = {
					limit = {
						check_variable = { SOV_temp_paranoia_days > 3 }
						NOT = { has_country_flag = SOV_paranoia_conducting_inspection_flag } #Don't trigger a random purge if one is already going to be triggered from decision
						SOV_paranoia_is_finishing_purge_focus = no #Don't trigger a random purge if one is already going to be triggered from focus
						NOT = { has_country_flag = SOV_paranoia_random_purge_cooldown_from_focus_flag } #Wait 15 days after a purge has been triggered from focus
						NOT = { has_country_flag = SOV_paranoia_random_purge_cooldown_from_decision_flag } #Wait 15 days after a purge has been triggered from decision
					}
					random_list = {
						100 = { # Nothing Happens
							modifier = {
								factor = 5
								check_variable = { SOV_paranoia_weekly_bucket < 400 }
							}
							modifier = {
								factor = 0.75
								check_variable = { SOV_paranoia_weekly_bucket > 500 }
							}
							#log = "Lucky you: No random purge this week"
						}

						100 = { # Regular Purge
							modifier = {
								factor = 0
								check_variable = { SOV_medium_paranoia_days = 0 }
							}
							modifier = {
								factor = 1.5
								check_variable = { SOV_paranoia_weekly_bucket > 400 }
							}
							modifier = {
								factor = 2
								check_variable = { SOV_medium_paranoia_days > SOV_high_paranoia_days }
							}
							SOV_manage_a_regular_purge_effect = yes
						}

						100 = { #Great Purge
							modifier = {
								factor = 0
								check_variable = { SOV_high_paranoia_days = 0 }
							}
							modifier = {
								factor = 0.5
								check_variable = { SOV_high_paranoia_days < 3 }
							}
							modifier = {
								factor = 2
								check_variable = { SOV_high_paranoia_days > SOV_medium_paranoia_days }
							}
							modifier = {
								factor = 1.5
								check_variable = { SOV_paranoia_weekly_bucket > 400 }
							}

							SOV_manage_a_great_purge_effect = yes
						}
					}
				}

				#CLEAN STUFF FOR NEXT WEEK
				set_variable = { SOV_medium_paranoia_days = 0 }
				set_variable = { SOV_high_paranoia_days = 0 }
				set_variable = { SOV_paranoia_weekly_bucket = 0 }
			}
		}
	}

	on_daily_SOV = {
		effect = {
			if = {
				limit = {
					has_country_flag = { flag = SOV_last_purge_flag days > 15 }
				}
				add_to_variable = { SOV_paranoia_weekly_bucket = SOV_paranoia }
				#log = "Added [?SOV_paranoia] Paranoia. Weekly BUCKET = [?SOV_paranoia_weekly_bucket]" #Debug 

				if = { #MEDIUM PARANOIA LEVEL
					limit = {
						SOV_paranoia_is_medium_level = yes
					}
					add_to_variable = { SOV_medium_paranoia_days = 1 } #Used to randomize having a Great or a Regular purge (so that every day kinda counts)
				}
				else_if = { #HIGH PARANOIA LEVEL
					limit = {
						SOV_paranoia_is_high_level = yes
					}
					add_to_variable = { SOV_high_paranoia_days = 1 } #Used to randomize having a Great or a Regular purge (so that every day kinda counts)
				}
				#log = "Medium Paranoia days = [?SOV_medium_paranoia_days] // High Paranoia days = [?SOV_high_paranoia_days]" #Debug
			}
			else = {
				#log = "NOT A PURGE WEEK" #Debug
			}
		}
	}

	# called when a country send volunteers to another
	# ROOT is sender, FROM is receiver
	on_send_volunteers = {
		#Manage Soviet volunteers in China
		effect = {
			if = { #Russia has sent volunteers to a Chinese faction
				limit = {
					original_tag = SOV
					FROM = {is_literally_china = yes }
				}
				FROM = { set_country_flag = SOV_russian_volunteers_in_china_flag }
			}	
		}
	}

	# ROOT is capitulated country, FROM is winner
	on_capitulation = {

		#Spanish general from SPD/SPC exile in SOV -> NSB
		effect = {
			if = {
				limit = {
					SOV = { has_country_flag = SOV_spanish_refugee_generals_welcome_flag }
					has_dlc = "La Resistance"
					OR = {
						tag = SPD
						tag = SPC
					}
					OR = {
						SPR_scw_in_progress = yes #In case someone else caps the Spanish faction
						FROM = { original_tag = SPR }
					}
				}
				SOV_manage_spanish_generals_exiled_in_ussr_effect = yes
			}
		}

		#If Soviet capitulates, remove dynamic modifiers from propagandas and stuff
		effect = {
			if = {
				limit = {
					original_tag = SOV
				}
				if = { #SOV_invaders_must_die
					limit = {
						any_state = {
							has_dynamic_modifier = { modifier = SOV_invaders_must_die }
						}
					}
					every_state = {
						limit = {
							has_dynamic_modifier = { modifier = SOV_invaders_must_die }
						}
						remove_dynamic_modifier = { modifier = SOV_invaders_must_die }
					}
				}
				if = { #SOV_defend_moscow
					limit = {
						any_state = {
							has_dynamic_modifier = { modifier = SOV_defend_moscow }
						}
					}
					every_state = {
						limit = {
							has_dynamic_modifier = { modifier = SOV_defend_moscow }
						}
						remove_dynamic_modifier = { modifier = SOV_defend_moscow }
					}
				}
				if = { #SOV_increased_metals_production
					limit = {
						any_state = {
							has_dynamic_modifier = { modifier = SOV_increased_metals_production }
						}
					}
					every_state = {
						limit = {
							has_dynamic_modifier = { modifier = SOV_increased_metals_production }
						}
						remove_dynamic_modifier = { modifier = SOV_increased_metals_production }
					}
				}
				if = { #SOV_factory_worker_militias_raised
					limit = {
						any_state = {
							has_dynamic_modifier = { modifier = SOV_factory_worker_militias_raised }
						}
					}
					every_state = {
						limit = {
							has_dynamic_modifier = { modifier = SOV_factory_worker_militias_raised }
						}
						remove_dynamic_modifier = { modifier = SOV_factory_worker_militias_raised }
					}
				}
				if = { #SOV_civilian_labor_in_defense_mod
					limit = {
						any_state = {
							has_dynamic_modifier = { modifier = SOV_civilian_labor_in_defense_mod }
						}
					}
					every_state = {
						limit = {
							has_dynamic_modifier = { modifier = SOV_civilian_labor_in_defense_mod }
						}
						remove_dynamic_modifier = { modifier = SOV_civilian_labor_in_defense_mod }
					}
				}
			}
		}
	}
}

